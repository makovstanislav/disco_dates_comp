// Define strict cell type for inference
type CellVal = string | number | boolean | Date;

/**
 * Office Script: Copy First Available and Discontinue dates from GFE to Main (cols E–F).
 * • Reads Main rows starting at row 3 (zero-based index 2).
 * • Normalizes Material and Season (trim + lowercase).
 * • Builds lookup from GFE cols A–D.
 * • Copies GFE C→Main E and GFE D→Main F when keys match.
 */
function main(workbook: ExcelScript.Workbook): void {
  const START_ROW: number = 2;
  const MAIN_COL_COUNT: number = 6; // A–F

  // Helper: normalize key by trimming and lower-casing
  const normalizeKey = (val: CellVal): string => String(val).trim().toLowerCase();

  // Worksheets
  const wsMain = workbook.getWorksheet("Main");
  const wsGfe  = workbook.getWorksheet("GFE");
  if (!wsMain || !wsGfe) return;

  // Read GFE used range
  const gfeUsed = wsGfe.getUsedRange();
  if (!gfeUsed) return;
  const gfeVals = gfeUsed.getValues() as CellVal[][];

  // Build lookup map
  const lookup: Record<string, {fa: CellVal; disco: CellVal}> = {};
  for (let i = START_ROW; i < gfeVals.length; i++) {
    const mat = gfeVals[i][0];
    const sea = gfeVals[i][1];
    const key = normalizeKey(mat) + '|' + normalizeKey(sea);
    if (mat !== "" && sea !== "") {
      lookup[key] = { fa: gfeVals[i][2], disco: gfeVals[i][3] };
    }
  }

  // Read Main used range
  const mainUsed = wsMain.getUsedRange();
  if (!mainUsed) return;
  const mainRowCount = mainUsed.getRowCount();

  // Read A–F from Main
  const mainRange = wsMain.getRangeByIndexes(0, 0, mainRowCount, MAIN_COL_COUNT);
  const mainVals = mainRange.getValues() as CellVal[][];

  // Copy dates into E-F
  for (let r = START_ROW; r < mainVals.length; r++) {
    const matMain = mainVals[r][0];
    const seaMain = mainVals[r][1];
    const key = normalizeKey(matMain) + '|' + normalizeKey(seaMain);
    const entry = lookup[key];
    if (entry) {
      mainVals[r][4] = entry.fa;
      mainVals[r][5] = entry.disco;
    }
  }

  // Write back only E-F to avoid overwriting entire sheet
  const outRange = wsMain.getRangeByIndexes(START_ROW, 4, mainVals.length - START_ROW, 2);
  const outVals = mainVals.slice(START_ROW).map(row => [row[4], row[5]]);
  outRange.setValues(outVals);
}
