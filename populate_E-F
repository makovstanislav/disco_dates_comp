// Define strict cell type for inference
type CellVal = string | number | boolean | Date;

/**
 * Office Script: Copy and format First Available/Discontinue dates from GFE to Main (cols E–F),
 * marking inactive if Material Status ≠ "ACTIVE".
 * • Reads Main rows starting at row 3 (zero-based index 2).
 * • Normalizes Material and Season as keys (trim + lowercase).
 * • Builds lookup from GFE cols A–E (Material Status in col E), starting from row 2 (index 1).
 * • If status ≠ "ACTIVE", writes "INACTIVE" in E-F.
 * • Else parses raw dates, formats as "MM/DD/YYYY" with leading zeros.
 * • Writes formatted strings into Main cols E (4) and F (5).
 */
function main(workbook: ExcelScript.Workbook): void {
  const START_ROW: number = 2;
  const MAIN_COL_COUNT: number = 6; // A–F

  // Helpers
  function normalizeKey(val: CellVal): string {
    return String(val).trim().toLowerCase();
  }
  function excelSerialToDate(serial: number): Date {
    const offset = serial > 60 ? serial - 1 : serial;
    const epoch = new Date(Date.UTC(1899, 11, 31));
    return new Date(epoch.getTime() + offset * 86400000);
  }
  function parseDate(raw: CellVal): Date | null {
    if (raw instanceof Date) return raw;
    if (typeof raw === 'number') return excelSerialToDate(raw);
    if (typeof raw === 'string') {
      const s = raw.trim();
      if (s === '') return null;
      const d = new Date(s);
      return isNaN(d.getTime()) ? null : d;
    }
    return null;
  }
  function formatDate(d: Date): string {
    const mm = String(d.getMonth() + 1).padStart(2, '0');
    const dd = String(d.getDate()).padStart(2, '0');
    const yyyy = d.getFullYear();
    return `${mm}/${dd}/${yyyy}`;
  }

  // Load worksheets
  const wsMain = workbook.getWorksheet("Main");
  const wsGfe  = workbook.getWorksheet("GFE");
  if (!wsMain || !wsGfe) return;

  // Build lookup from GFE A–E, starting row 2
  const gfeUsed = wsGfe.getUsedRange();
  if (!gfeUsed) return;
  const gfeData = gfeUsed.getValues() as CellVal[][];
  const lookup: Record<string, {fa: CellVal; disco: CellVal; status: string}> = {};
  for (let i = 1; i < gfeData.length; i++) {
    const mat = gfeData[i][0];
    const sea = gfeData[i][1];
    const key = normalizeKey(mat) + '|' + normalizeKey(sea);
    const statusVal = String(gfeData[i][4]).trim().toUpperCase();
    lookup[key] = { fa: gfeData[i][2], disco: gfeData[i][3], status: statusVal };
  }

  // Read Main
  const mainUsed = wsMain.getUsedRange();
  if (!mainUsed) return;
  const rowCount = mainUsed.getRowCount();
  const mainRange = wsMain.getRangeByIndexes(0, 0, rowCount, MAIN_COL_COUNT);
  const mainData = mainRange.getValues() as CellVal[][];

  // Prepare output values for E-F
  const out: string[][] = [];
  for (let r = START_ROW; r < mainData.length; r++) {
    const key = normalizeKey(mainData[r][0]) + '|' + normalizeKey(mainData[r][1]);
    const entry = lookup[key];
    let faStr = "", discoStr = "";
    if (entry) {
      if (entry.status !== "ACTIVE") {
        faStr = "INACTIVE";
        discoStr = "INACTIVE";
      } else {
        const faDate = parseDate(entry.fa);
        const diDate = parseDate(entry.disco);
        if (faDate) faStr = formatDate(faDate);
        if (diDate) discoStr = formatDate(diDate);
      }
    }
    out.push([faStr, discoStr]);
  }

  // Write back formatted E-F as text
  const writeRange = wsMain.getRangeByIndexes(START_ROW, 4, out.length, 2);
  const fmtMatrix: string[][] = Array(out.length).fill(["@","@"]); 
  writeRange.setNumberFormatLocal(fmtMatrix);
  writeRange.setValues(out);
}
