/**
 * Office Script: synchronize dates from “GFE” to “Main” and flag changes.
 *
 * • Starts at row 3 (0-based index 2).
 * • Copies First Available / Discontinue dates into Main cols E/F.
 * • Marks “Y” in Main cols G/H when dates differ.
 * • Uses explicit CellVal union type for all cell values.
 */

// Define explicit cell value type
type CellVal = string | number | boolean | Date;

// Normalize any CellVal to a primitive (string|number)
function normalizeValue(value: CellVal): string | number {
  if (value === "" || value === null || value === undefined) {
    return "";
  }
  if (typeof value === "number") {
    return value;
  }
  if (value instanceof Date) {
    return value.getTime();
  }
  return String(value).trim();
}

// Compare two CellVal values
function datesEqualValue(a: CellVal, b: CellVal): boolean {
  const normA: string | number = normalizeValue(a);
  const normB: string | number = normalizeValue(b);
  return normA === normB;
}

// Main function
function main(workbook: ExcelScript.Workbook): void {
  const START_ROW: number = 2;

  const wsMain: ExcelScript.Worksheet = workbook.getWorksheet("Main") as ExcelScript.Worksheet;
  const wsGFE: ExcelScript.Worksheet  = workbook.getWorksheet("GFE")  as ExcelScript.Worksheet;

  // Read GFE
  const gfeRange: ExcelScript.Range = wsGFE.getUsedRange() as ExcelScript.Range;
  const gfeData: CellVal[][]       = gfeRange.getValues() as CellVal[][];

  // Build lookup map
  interface DatesPair { fa: CellVal; disco: CellVal; }
  const lookup: Record<string, DatesPair> = {};
  for (let i: number = START_ROW; i < gfeData.length; i++) {
    const mat: string = String(gfeData[i][0]);
    const sea: string = String(gfeData[i][1]);
    if (mat === "" || sea === "") continue;
    lookup[`${mat}|${sea}`] = { fa: gfeData[i][2], disco: gfeData[i][3] };
  }

  // Read Main
  const mainRange: ExcelScript.Range = wsMain.getUsedRange() as ExcelScript.Range;
  const mainData: CellVal[][]       = mainRange.getValues() as CellVal[][];

  // Process Main rows
  for (let i: number = START_ROW; i < mainData.length; i++) {
    const mat: string = String(mainData[i][0]);
    const sea: string = String(mainData[i][1]);
    if (mat === "" || sea === "") continue;
    const key: string = `${mat}|${sea}`;
    const dp: DatesPair | undefined = lookup[key];
    if (!dp) continue;

    // Copy dates to E (4) and F (5)
    mainData[i][4] = dp.fa;
    mainData[i][5] = dp.disco;

    // Flag changes G (6) and H (7)
    if (!datesEqualValue(mainData[i][2], dp.fa))   mainData[i][6] = "Y";
    if (!datesEqualValue(mainData[i][3], dp.disco)) mainData[i][7] = "Y";
  }

  // Write back
  mainRange.setValues(mainData);
}
