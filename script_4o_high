// Define strict cell type for inference
type CellVal = string | number | boolean | Date;

/**
 * Office Script: Populate Main cols E–F from GFE sheet based on Material+Season.
 * • Reads Main starting row 3 (0-based index 2).
 * • Builds lookup from GFE cols A–D.
 * • Copies GFE First Available (col C) → Main col E.
 * • Copies GFE Discontinue    (col D) → Main col F.
 */
function main(workbook: ExcelScript.Workbook): void {
  const START_ROW: number = 2;
  const MAIN_COL_COUNT: number = 6;  // we need columns A–F

  // Worksheets
  const wsMain: ExcelScript.Worksheet = workbook.getWorksheet("Main")!;
  const wsGFE:  ExcelScript.Worksheet = workbook.getWorksheet("GFE")!;

  // Read GFE data (cols A–D)
  const gfeRange: ExcelScript.Range = wsGFE.getUsedRange()!;
  const gfeVals: CellVal[][] = gfeRange.getValues() as CellVal[][];

  // Build lookup: "material|season" → [faVal, discoVal]
  const lookup: Record<string, {fa: CellVal; disco: CellVal}> = {};
  for (let i: number = START_ROW; i < gfeVals.length; i++) {
    const mat: CellVal = gfeVals[i][0];
    const sea: CellVal = gfeVals[i][1];
    if (mat === "" || sea === "") continue;
    const key: string = `${mat}|${sea}`;
    lookup[key] = { fa: gfeVals[i][2], disco: gfeVals[i][3] };
  }

  // Read Main data (cols A–F)
  const mainRange: ExcelScript.Range = wsMain.getRangeByIndexes(0, 0, wsMain.getUsedRange()!.getRowCount(), MAIN_COL_COUNT);
  const mainVals: CellVal[][] = mainRange.getValues() as CellVal[][];

  // Populate cols E (index 4) and F (index 5)
  for (let r: number = START_ROW; r < mainVals.length; r++) {
    const matM: CellVal = mainVals[r][0];
    const seaM: CellVal = mainVals[r][1];
    if (matM === "" || seaM === "") continue;
    const key: string = `${matM}|${seaM}`;
    const entry = lookup[key];
    if (!entry) continue;
    mainVals[r][4] = entry.fa;
    mainVals[r][5] = entry.disco;
  }

  // Write back E–F updates
  mainRange.setValues(mainVals);
}
