/**
 * Office Script: synchronize dates from "GFE" to "Main" and flag changes.
 *
 * • Starts at row 3 (0-based index 2).
 * • Copies First Available / Discontinue dates into Main cols E/F.
 * • Marks "Y" in Main cols G/H when dates differ.
 * • All parameters, variables, and functions use explicit types.
 */

// Excel date serial to JS milliseconds (handles 1900 leap year bug)
function excelSerialToMillis(serial: number): number {
  const serialDays: number = serial > 60 ? serial - 1 : serial;
  const excelEpoch: Date = new Date(Date.UTC(1899, 11, 31));
  const millis: number = excelEpoch.getTime() + serialDays * 24 * 60 * 60 * 1000;
  return millis;
}

// Define a strict cell value type
type CellVal = string | number | boolean | Date;

// Convert CellVal to milliseconds for comparison
function toMillis(value: CellVal): number | undefined {
  if (value === "" || value === null || value === undefined) {
    return undefined;
  }
  if (typeof value === "number") {
    return excelSerialToMillis(value);
  }
  if (value instanceof Date) {
    return value.getTime();
  }
  if (typeof value === "string") {
    const dt: Date = new Date(value);
    return isNaN(dt.getTime()) ? undefined : dt.getTime();
  }
  return undefined; // boolean or other
}

// Compare two CellVal values (dates or blanks)
function datesEqualValue(a: CellVal, b: CellVal): boolean {
  const ma: number | undefined = toMillis(a);
  const mb: number | undefined = toMillis(b);
  if (ma === undefined && mb === undefined) {
    return true;
  }
  return ma !== undefined && mb !== undefined && ma === mb;
}

function main(workbook: ExcelScript.Workbook): void {
  const START_ROW: number = 2; // row 3 in Excel

  const wsMain: ExcelScript.Worksheet = workbook.getWorksheet("Main")!;
  const wsGFE: ExcelScript.Worksheet  = workbook.getWorksheet("GFE")!;

  const gfeRange: ExcelScript.Range = wsGFE.getUsedRange()!;
  const gfeData: CellVal[][]       = gfeRange.getValues() as CellVal[][];

  interface DatesPair { fa: CellVal; disco: CellVal; }
  const lookup: Record<string, DatesPair> = {};

  for (let i: number = START_ROW; i < gfeData.length; i++) {
    const matKey: string = String(gfeData[i][0]);
    const seaKey: string = String(gfeData[i][1]);
    if (!matKey || !seaKey) {
      continue;
    }
    lookup[`${matKey}|${seaKey}`] = { fa: gfeData[i][2], disco: gfeData[i][3] };
  }

  const mainRange: ExcelScript.Range = wsMain.getUsedRange()!;
  const mainData: CellVal[][]       = mainRange.getValues() as CellVal[][];

  for (let i: number = START_ROW; i < mainData.length; i++) {
    const matKey: string = String(mainData[i][0]);
    const seaKey: string = String(mainData[i][1]);
    if (!matKey || !seaKey) {
      continue;
    }
    const key: string = `${matKey}|${seaKey}`;
    const dp: DatesPair | undefined = lookup[key];
    if (!dp) {
      continue;
    }

    // Copy dates to E/F
    mainData[i][4] = dp.fa;
    mainData[i][5] = dp.disco;

    // Flag changes G/H
    if (!datesEqualValue(mainData[i][2], dp.fa)) {
      mainData[i][6] = "Y";
    }
    if (!datesEqualValue(mainData[i][3], dp.disco)) {
      mainData[i][7] = "Y";
    }
  }

  mainRange.setValues(mainData);
}

